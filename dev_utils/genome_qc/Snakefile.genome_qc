### Usage: ###
#snakemake -p -s Snakefile.genome_qc --use-conda --cores all

import os
import glob
import sys

# read config info into this namespace
configfile: "config.yaml"

### WF inputs ###
working_dir = config["working_dir"]
genome_dir = config["fasta_dir"]
nthreads = int(config["nthreads"])
logs = os.path.join(working_dir, config["logs"])
filter_size = config["filter_size"]
comp = config["completeness"]
cont = config["contamination"]
qsmin = config["qscore_min"]
condaenv = config["condaenv"]
######################
# Create filtered dir for genomes
filtered_genome_dir = os.path.join(working_dir, genome_dir + "_filtered")
# Only proceed with genomes of sufficient quality via CheckM
subset_genome_dir = os.path.join(working_dir, genome_dir + "_subset")
check_dirs = [logs, subset_genome_dir, filtered_genome_dir]
for d in check_dirs:
	isExist = os.path.exists(d)
	if not isExist:
		os.makedirs(d)

workflow_modules = ["checkm", "subset_genomes",
			"seqkit_stat", "seqkit_seq",
			"qscore", "gtdbtk", "barrnap",
			"blast", "barblast", "dedupe",
			"trnascan", "cp_dedupe", "gunc"
			]
# Used to pre-filter by completeness and contamination
FILTER_CMD = "NR==1; NR>1 {if ($12 >= " + comp + " && $13 <= " + cont + ") print $0}"
DELIM = "\t"

# a pseudo-rule that collects the target files
rule all:
	input:
		expand(os.path.join(logs, "{id}.log"), id=workflow_modules)

rule run_seqkit_seq:
	input:  
		fasta_dir = os.path.join(working_dir, genome_dir)
	output: 
		out_log = os.path.join(logs, "seqkit_seq.log")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		f_size="{filter_size}"
		if [ -z "$f_size" ];
		then
			for g in {working_dir}/{genome_dir}/*.fasta; do base=$(basename $g | rev | cut -d'.' -f2- | rev); echo full $base; seqkit seq -m 0 -o {filtered_genome_dir}/$base.full.fasta $g; done;				
		else
			pattern=" "
			if [[ $f_size =~ $pattern ]]
			then
				for size in $f_size; do for g in {working_dir}/{genome_dir}/*.fasta; do base=$(basename $g | rev | cut -d'.' -f2- | rev); echo $size $base; seqkit seq -m $size -o {filtered_genome_dir}/$base.$size.fasta $g; done; done;
			else
				for g in {working_dir}/{genome_dir}/*.fasta; do base=$(basename $g | rev | cut -d'.' -f2- | rev); echo $f_size $base; seqkit seq -m $f_size -o {filtered_genome_dir}/$base.$f_size.fasta $g; done;
			fi
		fi
		echo "Done."  > {output.out_log}
		find {filtered_genome_dir}/ -size 0 -print -delete
		"""
		
rule run_checkm:
	input:  
		fasta_dir = filtered_genome_dir,
		seq_log = os.path.join(logs, "seqkit_seq.log")
	output: 
		out_log = os.path.join(logs, "checkm.log"),
		hpmq_table = os.path.join(working_dir, "checkm/checkm_output_HPMQ.tsv")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		f_size="{filter_size}"
		if [ -z "$f_size" ];
		then
			checkm lineage_wf -f {working_dir}/checkm/checkm_output.full.tsv --tab_table -x full.fasta -t {threads} --pplacer_threads {threads} {input.fasta_dir} {working_dir}/checkm;
			awk -F {DELIM:q} {FILTER_CMD:q} {working_dir}/checkm/checkm_output.full.tsv > {working_dir}/checkm/checkm_output_HPMQ.full.tsv;
			head -n 1 {working_dir}/checkm/checkm_output_HPMQ.full.tsv > {working_dir}/checkm/checkm_output_HPMQ.tsv;
			rm -rf {working_dir}/checkm/lineage.ms {working_dir}/checkm/bins {working_dir}/checkm/storage;
		else
			pattern=" "
			if [[ $f_size =~ $pattern ]]
			then
				for size in $f_size; do checkm lineage_wf -f {working_dir}/checkm/checkm_output.$size.tsv --tab_table -x $size.fasta -t {threads} --pplacer_threads {threads} {input.fasta_dir} {working_dir}/checkm; awk -F {DELIM:q} {FILTER_CMD:q} {working_dir}/checkm/checkm_output.$size.tsv > {working_dir}/checkm/checkm_output_HPMQ.$size.tsv; head -n 1 {working_dir}/checkm/checkm_output_HPMQ.$size.tsv > {working_dir}/checkm/checkm_output_HPMQ.tsv; rm -rf {working_dir}/checkm/lineage.ms {working_dir}/checkm/bins {working_dir}/checkm/storage; done;
			else
				checkm lineage_wf -f {working_dir}/checkm/checkm_output.$f_size.tsv --tab_table -x $f_size.fasta -t {threads} --pplacer_threads {threads} {input.fasta_dir} {working_dir}/checkm;
				awk -F {DELIM:q} {FILTER_CMD:q} {working_dir}/checkm/checkm_output.$f_size.tsv > {working_dir}/checkm/checkm_output_HPMQ.$f_size.tsv;
				head -n 1 {working_dir}/checkm/checkm_output_HPMQ.$f_size.tsv > {working_dir}/checkm/checkm_output_HPMQ.tsv;
				rm -rf {working_dir}/checkm/lineage.ms {working_dir}/checkm/bins {working_dir}/checkm/storage;
			fi
		fi
		grep -h -v 'Completeness' {working_dir}/checkm/checkm_output_HPMQ.*.tsv >> {working_dir}/checkm/checkm_output_HPMQ.tsv
		echo "Done."  > {output.out_log}
		"""

rule run_seqkit_stat:
	input:  
		fasta_dir = filtered_genome_dir,
		chk_log = os.path.join(logs, "checkm.log")
	output: 
		out_log = os.path.join(logs, "seqkit_stat.log")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		mkdir -p {working_dir}/seqkit
		seqkit stat -a -T -o {working_dir}/seqkit/seqkit_stats.tsv {input.fasta_dir}/*.fasta
		echo "Done."  > {output.out_log}
		"""
		
rule run_qscore:
	input:
		checkm_log = os.path.join(logs, "checkm.log"),
		seqkt_log = os.path.join(logs, "seqkit_stat.log")
	output: 
		out_log = os.path.join(logs, "qscore.log"),
		qscore_table = os.path.join(working_dir, "qscore/qscore_mqhp.tsv")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		mkdir -p {working_dir}/qscore
		python ./calc_qscore.py {working_dir} {comp} {cont}
		echo "Done."  > {output.out_log}
		"""

rule subset_genomes:
	input:
		fasta_dir = filtered_genome_dir,
		out_log = os.path.join(logs, "qscore.log"),
		qscore_table = os.path.join(working_dir, "qscore/qscore_mqhp.tsv")
	output:
		out_log = os.path.join(logs, "subset_genomes.log")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		mkdir -p {subset_genome_dir}
		for g in $(grep -v Bin {input.qscore_table} | cut -f2); do cp {filtered_genome_dir}/$g.fasta {subset_genome_dir}/$g.fasta; done;
		echo "Done."  > {output.out_log}
		"""

rule run_gtdbtk:
	input:  
		fasta_dir = subset_genome_dir,
		sub_log = os.path.join(logs, "subset_genomes.log")
	output: 
		out_log = os.path.join(logs, "gtdbtk.log")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		gtdbtk classify_wf --genome_dir {input.fasta_dir} --out_dir {working_dir}/gtdbtk -x fasta --cpus {threads} --pplacer_cpus {threads}
		echo "Done."  > {output.out_log}
		"""

rule run_barrnap:
	input:  
		fasta_dir = subset_genome_dir,
		sub_log = os.path.join(logs, "subset_genomes.log"),
		gtdbtk_log = os.path.join(logs, "gtdbtk.log")
	output: 
		out_log = os.path.join(logs, "barrnap.log")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		mkdir -p {working_dir}/barrnap
		for g in $(cat {working_dir}/gtdbtk/gtdbtk.bac120.summary.tsv | cut -f1 | grep -v 'user_genome'); do echo $g; barrnap --kingdom bac --threads {threads} --outseq {working_dir}/barrnap/$g.rRNA.fasta {input.fasta_dir}/$g.fasta > {working_dir}/barrnap/$g.rRNA.gff; done;
		 echo "Bacteria Done." >> {output.out_log}
		for g in $(cat {working_dir}/gtdbtk/gtdbtk.ar53.summary.tsv | cut -f1 | grep -v 'user_genome'); do echo $g; barrnap --kingdom arc --threads {threads} --outseq {working_dir}/barrnap/$g.rRNA.fasta {input.fasta_dir}/$g.fasta > {working_dir}/barrnap/$g.rRNA.gff; done;
		 echo "Archaea Done." >> {output.out_log}
		"""

rule run_blast:
	input:  
		gtdbtk_log = os.path.join(logs, "gtdbtk.log"),
		barrnap_log = os.path.join(logs, "barrnap.log")
	output: 
		out_log = os.path.join(logs, "blast.log")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		# BLAST rRNAs against themselves
		for g in $(cat {working_dir}/gtdbtk/gtdbtk.bac120.summary.tsv | cut -f1 | grep -v 'user_genome'); do echo $g; fasta={working_dir}/barrnap/$g.rRNA.fasta; count=$(wc -l $fasta | cut -d' ' -f1); echo $count; if [ "$count" -ne "0" ]; then makeblastdb -in $fasta -dbtype nucl -out {working_dir}/barrnap/$g; fi; done;

		for g in $(cat {working_dir}/gtdbtk/gtdbtk.bac120.summary.tsv | cut -f1 | grep -v 'user_genome'); do echo $g; fasta={working_dir}/barrnap/$g.rRNA.fasta; count=$(wc -l $fasta | cut -d' ' -f1); echo $count; if [ "$count" -ne "0" ]; then blastn -query {working_dir}/barrnap/$g.rRNA.fasta -db {working_dir}/barrnap/$g -outfmt 6 -out {working_dir}/barrnap/$g.blastout -max_target_seqs 10; fi; done;

		for g in $(cat {working_dir}/gtdbtk/gtdbtk.ar53.summary.tsv | cut -f1 | grep -v 'user_genome'); do echo $g; fasta={working_dir}/barrnap/$g.rRNA.fasta; count=$(wc -l $fasta | cut -d' ' -f1); echo $count; if [ "$count" -ne "0" ]; then makeblastdb -in {working_dir}/barrnap/$g.rRNA.fasta -dbtype nucl -out {working_dir}/barrnap/$g; fi; done;

		for g in $(cat {working_dir}/gtdbtk/gtdbtk.ar53.summary.tsv | cut -f1 | grep -v 'user_genome'); do echo $g; fasta={working_dir}/barrnap/$g.rRNA.fasta; count=$(wc -l $fasta | cut -d' ' -f1); echo $count; if [ "$count" -ne "0" ]; then blastn -query {working_dir}/barrnap/$g.rRNA.fasta -db {working_dir}/barrnap/$g -outfmt 6 -out {working_dir}/barrnap/$g.blastout -max_target_seqs 10; fi; done;
		echo "Done."  > {output.out_log}
		"""

rule compile_barblast:
	input:  
		barrnap_log = os.path.join(logs, "barrnap.log"),
		blast_log = os.path.join(logs, "blast.log")
	output: 
		out_log = os.path.join(logs, "barblast.log")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		python ./compare_barrnap.py {working_dir}/barrnap/
		echo "Done."  > {output.out_log}
		"""

rule run_dedupe:
	input:
		checkm_log = os.path.join(logs, "barblast.log")
	output: 
		out_log = os.path.join(logs, "dedupe.log"),
		dedupe_table = os.path.join(working_dir, "dedupe/dedupe_mqhp.tsv")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		mkdir -p {working_dir}/dedupe
		python ./dedupe_genomes.py {working_dir} {comp} {cont} {qsmin}
		echo "Done."  > {output.out_log}
		"""

rule run_cp_dedupe:
	input:
		fasta_dir = subset_genome_dir,
		dedupe_log = os.path.join(logs, "dedupe.log"),
		dedupe_table = os.path.join(working_dir, "dedupe/dedupe_mqhp.tsv")
	output: 
		out_log = os.path.join(logs, "cp_dedupe.log")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		mkdir -p {working_dir}/dedupe/fasta
		for g in $(cat {input.dedupe_table} | cut -f2 | grep -v 'Bin Id'); do echo $g; cp {input.fasta_dir}/$g.fasta {working_dir}/dedupe/fasta/$g.fasta; done;
		echo "Done."  > {output.out_log}
		"""

rule run_trnscan:
	input:  
		fasta_dir = subset_genome_dir,
		dedupe_log = os.path.join(logs, "dedupe.log"),
		dedupe_table = os.path.join(working_dir, "dedupe/dedupe_mqhp.tsv")
	output: 
		out_log = os.path.join(logs, "trnascan.log")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		mkdir -p {working_dir}/trnascan
		for g in $(cat {input.dedupe_table} | grep 'Bacteria' | cut -f2 | grep -v 'Bin Id'); do echo $g; tRNAscan-SE -B -o {working_dir}/trnascan/$g.output.txt -m {working_dir}/trnascan/$g.stats.txt -b {working_dir}/trnascan/$g.bed -j {working_dir}/trnascan/$g.gff -a {working_dir}/trnascan/$g.trna.fasta -l {working_dir}/trnascan/$g.log --thread {threads} {input.fasta_dir}/$g.fasta; done;
		echo "Bacteria Done."  >> {output.out_log}

		for g in $(cat {input.dedupe_table} | grep 'Archaea' | cut -f2 | grep -v 'Bin Id'); do echo $g; tRNAscan-SE -A -o {working_dir}/trnascan/$g.output.txt -m {working_dir}/trnascan/$g.stats.txt -b {working_dir}/trnascan/$g.bed -j {working_dir}/trnascan/$g.gff -a {working_dir}/trnascan/$g.trna.fasta -l {working_dir}/trnascan/$g.log --thread {threads} {input.fasta_dir}/$g.fasta; done;
		echo "Archaea Done."  >> {output.out_log}
		"""
		
rule run_gunc:
	input:
		out_log = os.path.join(logs, "cp_dedupe.log")
	output: 
		out_log = os.path.join(logs, "gunc.log")
	threads:
		nthreads
	conda:
		condaenv
	shell:
		"""
		mkdir -p {working_dir}/gunc
		gunc run -r /home/ryan/refdb/guncdb/gunc_db_progenomes2.1.dmnd -d {working_dir}/dedupe/fasta -o {working_dir}/gunc -e .fasta -t {threads}
		echo "Done."  > {output.out_log}
		"""


